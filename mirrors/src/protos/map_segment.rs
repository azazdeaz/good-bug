// This file is generated by rust-protobuf 2.22.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `map_segment.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_1;

#[derive(PartialEq,Clone,Default)]
pub struct Map {
    // message fields
    pub current_frame: ::protobuf::SingularPtrField<Map_Mat44>,
    pub keyframes: ::protobuf::RepeatedField<Map_keyframe>,
    pub edges: ::protobuf::RepeatedField<Map_edge>,
    pub landmarks: ::protobuf::RepeatedField<Map_landmark>,
    pub local_landmarks: ::std::vec::Vec<u32>,
    pub messages: ::protobuf::RepeatedField<Map_msg>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Map {
    fn default() -> &'a Map {
        <Map as ::protobuf::Message>::default_instance()
    }
}

impl Map {
    pub fn new() -> Map {
        ::std::default::Default::default()
    }

    // .map_segment.Map.Mat44 current_frame = 1;


    pub fn get_current_frame(&self) -> &Map_Mat44 {
        self.current_frame.as_ref().unwrap_or_else(|| <Map_Mat44 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_current_frame(&mut self) {
        self.current_frame.clear();
    }

    pub fn has_current_frame(&self) -> bool {
        self.current_frame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_frame(&mut self, v: Map_Mat44) {
        self.current_frame = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_current_frame(&mut self) -> &mut Map_Mat44 {
        if self.current_frame.is_none() {
            self.current_frame.set_default();
        }
        self.current_frame.as_mut().unwrap()
    }

    // Take field
    pub fn take_current_frame(&mut self) -> Map_Mat44 {
        self.current_frame.take().unwrap_or_else(|| Map_Mat44::new())
    }

    // repeated .map_segment.Map.keyframe keyframes = 2;


    pub fn get_keyframes(&self) -> &[Map_keyframe] {
        &self.keyframes
    }
    pub fn clear_keyframes(&mut self) {
        self.keyframes.clear();
    }

    // Param is passed by value, moved
    pub fn set_keyframes(&mut self, v: ::protobuf::RepeatedField<Map_keyframe>) {
        self.keyframes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keyframes(&mut self) -> &mut ::protobuf::RepeatedField<Map_keyframe> {
        &mut self.keyframes
    }

    // Take field
    pub fn take_keyframes(&mut self) -> ::protobuf::RepeatedField<Map_keyframe> {
        ::std::mem::replace(&mut self.keyframes, ::protobuf::RepeatedField::new())
    }

    // repeated .map_segment.Map.edge edges = 3;


    pub fn get_edges(&self) -> &[Map_edge] {
        &self.edges
    }
    pub fn clear_edges(&mut self) {
        self.edges.clear();
    }

    // Param is passed by value, moved
    pub fn set_edges(&mut self, v: ::protobuf::RepeatedField<Map_edge>) {
        self.edges = v;
    }

    // Mutable pointer to the field.
    pub fn mut_edges(&mut self) -> &mut ::protobuf::RepeatedField<Map_edge> {
        &mut self.edges
    }

    // Take field
    pub fn take_edges(&mut self) -> ::protobuf::RepeatedField<Map_edge> {
        ::std::mem::replace(&mut self.edges, ::protobuf::RepeatedField::new())
    }

    // repeated .map_segment.Map.landmark landmarks = 4;


    pub fn get_landmarks(&self) -> &[Map_landmark] {
        &self.landmarks
    }
    pub fn clear_landmarks(&mut self) {
        self.landmarks.clear();
    }

    // Param is passed by value, moved
    pub fn set_landmarks(&mut self, v: ::protobuf::RepeatedField<Map_landmark>) {
        self.landmarks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_landmarks(&mut self) -> &mut ::protobuf::RepeatedField<Map_landmark> {
        &mut self.landmarks
    }

    // Take field
    pub fn take_landmarks(&mut self) -> ::protobuf::RepeatedField<Map_landmark> {
        ::std::mem::replace(&mut self.landmarks, ::protobuf::RepeatedField::new())
    }

    // repeated uint32 local_landmarks = 5;


    pub fn get_local_landmarks(&self) -> &[u32] {
        &self.local_landmarks
    }
    pub fn clear_local_landmarks(&mut self) {
        self.local_landmarks.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_landmarks(&mut self, v: ::std::vec::Vec<u32>) {
        self.local_landmarks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_local_landmarks(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.local_landmarks
    }

    // Take field
    pub fn take_local_landmarks(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.local_landmarks, ::std::vec::Vec::new())
    }

    // repeated .map_segment.Map.msg messages = 6;


    pub fn get_messages(&self) -> &[Map_msg] {
        &self.messages
    }
    pub fn clear_messages(&mut self) {
        self.messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_messages(&mut self, v: ::protobuf::RepeatedField<Map_msg>) {
        self.messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_messages(&mut self) -> &mut ::protobuf::RepeatedField<Map_msg> {
        &mut self.messages
    }

    // Take field
    pub fn take_messages(&mut self) -> ::protobuf::RepeatedField<Map_msg> {
        ::std::mem::replace(&mut self.messages, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Map {
    fn is_initialized(&self) -> bool {
        for v in &self.current_frame {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.keyframes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.edges {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.landmarks {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.messages {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.current_frame)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.keyframes)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.edges)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.landmarks)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.local_landmarks)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.messages)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.current_frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.keyframes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.edges {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.landmarks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.local_landmarks {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.current_frame.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.keyframes {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.edges {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.landmarks {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.local_landmarks {
            os.write_uint32(5, *v)?;
        };
        for v in &self.messages {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Map {
        Map::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Map_Mat44>>(
                "current_frame",
                |m: &Map| { &m.current_frame },
                |m: &mut Map| { &mut m.current_frame },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Map_keyframe>>(
                "keyframes",
                |m: &Map| { &m.keyframes },
                |m: &mut Map| { &mut m.keyframes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Map_edge>>(
                "edges",
                |m: &Map| { &m.edges },
                |m: &mut Map| { &mut m.edges },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Map_landmark>>(
                "landmarks",
                |m: &Map| { &m.landmarks },
                |m: &mut Map| { &mut m.landmarks },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "local_landmarks",
                |m: &Map| { &m.local_landmarks },
                |m: &mut Map| { &mut m.local_landmarks },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Map_msg>>(
                "messages",
                |m: &Map| { &m.messages },
                |m: &mut Map| { &mut m.messages },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Map>(
                "Map",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Map {
        static instance: ::protobuf::rt::LazyV2<Map> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Map::new)
    }
}

impl ::protobuf::Clear for Map {
    fn clear(&mut self) {
        self.current_frame.clear();
        self.keyframes.clear();
        self.edges.clear();
        self.landmarks.clear();
        self.local_landmarks.clear();
        self.messages.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Map {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Map {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Map_keyframe {
    // message fields
    pub id: u32,
    pub pose: ::protobuf::SingularPtrField<Map_Mat44>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Map_keyframe {
    fn default() -> &'a Map_keyframe {
        <Map_keyframe as ::protobuf::Message>::default_instance()
    }
}

impl Map_keyframe {
    pub fn new() -> Map_keyframe {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // .map_segment.Map.Mat44 pose = 2;


    pub fn get_pose(&self) -> &Map_Mat44 {
        self.pose.as_ref().unwrap_or_else(|| <Map_Mat44 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pose(&mut self) {
        self.pose.clear();
    }

    pub fn has_pose(&self) -> bool {
        self.pose.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pose(&mut self, v: Map_Mat44) {
        self.pose = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pose(&mut self) -> &mut Map_Mat44 {
        if self.pose.is_none() {
            self.pose.set_default();
        }
        self.pose.as_mut().unwrap()
    }

    // Take field
    pub fn take_pose(&mut self) -> Map_Mat44 {
        self.pose.take().unwrap_or_else(|| Map_Mat44::new())
    }
}

impl ::protobuf::Message for Map_keyframe {
    fn is_initialized(&self) -> bool {
        for v in &self.pose {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pose)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.pose.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if let Some(ref v) = self.pose.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Map_keyframe {
        Map_keyframe::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &Map_keyframe| { &m.id },
                |m: &mut Map_keyframe| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Map_Mat44>>(
                "pose",
                |m: &Map_keyframe| { &m.pose },
                |m: &mut Map_keyframe| { &mut m.pose },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Map_keyframe>(
                "Map.keyframe",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Map_keyframe {
        static instance: ::protobuf::rt::LazyV2<Map_keyframe> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Map_keyframe::new)
    }
}

impl ::protobuf::Clear for Map_keyframe {
    fn clear(&mut self) {
        self.id = 0;
        self.pose.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Map_keyframe {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Map_keyframe {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Map_edge {
    // message fields
    pub id0: u32,
    pub id1: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Map_edge {
    fn default() -> &'a Map_edge {
        <Map_edge as ::protobuf::Message>::default_instance()
    }
}

impl Map_edge {
    pub fn new() -> Map_edge {
        ::std::default::Default::default()
    }

    // uint32 id0 = 1;


    pub fn get_id0(&self) -> u32 {
        self.id0
    }
    pub fn clear_id0(&mut self) {
        self.id0 = 0;
    }

    // Param is passed by value, moved
    pub fn set_id0(&mut self, v: u32) {
        self.id0 = v;
    }

    // uint32 id1 = 2;


    pub fn get_id1(&self) -> u32 {
        self.id1
    }
    pub fn clear_id1(&mut self) {
        self.id1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_id1(&mut self, v: u32) {
        self.id1 = v;
    }
}

impl ::protobuf::Message for Map_edge {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id0 = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id1 = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id0 != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id0, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.id1 != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id1, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id0 != 0 {
            os.write_uint32(1, self.id0)?;
        }
        if self.id1 != 0 {
            os.write_uint32(2, self.id1)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Map_edge {
        Map_edge::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id0",
                |m: &Map_edge| { &m.id0 },
                |m: &mut Map_edge| { &mut m.id0 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id1",
                |m: &Map_edge| { &m.id1 },
                |m: &mut Map_edge| { &mut m.id1 },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Map_edge>(
                "Map.edge",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Map_edge {
        static instance: ::protobuf::rt::LazyV2<Map_edge> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Map_edge::new)
    }
}

impl ::protobuf::Clear for Map_edge {
    fn clear(&mut self) {
        self.id0 = 0;
        self.id1 = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Map_edge {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Map_edge {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Map_landmark {
    // message fields
    pub id: u32,
    pub coords: ::std::vec::Vec<f64>,
    pub color: ::std::vec::Vec<f64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Map_landmark {
    fn default() -> &'a Map_landmark {
        <Map_landmark as ::protobuf::Message>::default_instance()
    }
}

impl Map_landmark {
    pub fn new() -> Map_landmark {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // repeated double coords = 2;


    pub fn get_coords(&self) -> &[f64] {
        &self.coords
    }
    pub fn clear_coords(&mut self) {
        self.coords.clear();
    }

    // Param is passed by value, moved
    pub fn set_coords(&mut self, v: ::std::vec::Vec<f64>) {
        self.coords = v;
    }

    // Mutable pointer to the field.
    pub fn mut_coords(&mut self) -> &mut ::std::vec::Vec<f64> {
        &mut self.coords
    }

    // Take field
    pub fn take_coords(&mut self) -> ::std::vec::Vec<f64> {
        ::std::mem::replace(&mut self.coords, ::std::vec::Vec::new())
    }

    // repeated double color = 3;


    pub fn get_color(&self) -> &[f64] {
        &self.color
    }
    pub fn clear_color(&mut self) {
        self.color.clear();
    }

    // Param is passed by value, moved
    pub fn set_color(&mut self, v: ::std::vec::Vec<f64>) {
        self.color = v;
    }

    // Mutable pointer to the field.
    pub fn mut_color(&mut self) -> &mut ::std::vec::Vec<f64> {
        &mut self.color
    }

    // Take field
    pub fn take_color(&mut self) -> ::std::vec::Vec<f64> {
        ::std::mem::replace(&mut self.color, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Map_landmark {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.coords)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.color)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += 9 * self.coords.len() as u32;
        my_size += 9 * self.color.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        for v in &self.coords {
            os.write_double(2, *v)?;
        };
        for v in &self.color {
            os.write_double(3, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Map_landmark {
        Map_landmark::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &Map_landmark| { &m.id },
                |m: &mut Map_landmark| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "coords",
                |m: &Map_landmark| { &m.coords },
                |m: &mut Map_landmark| { &mut m.coords },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "color",
                |m: &Map_landmark| { &m.color },
                |m: &mut Map_landmark| { &mut m.color },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Map_landmark>(
                "Map.landmark",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Map_landmark {
        static instance: ::protobuf::rt::LazyV2<Map_landmark> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Map_landmark::new)
    }
}

impl ::protobuf::Clear for Map_landmark {
    fn clear(&mut self) {
        self.id = 0;
        self.coords.clear();
        self.color.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Map_landmark {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Map_landmark {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Map_Mat44 {
    // message fields
    pub pose: ::std::vec::Vec<f64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Map_Mat44 {
    fn default() -> &'a Map_Mat44 {
        <Map_Mat44 as ::protobuf::Message>::default_instance()
    }
}

impl Map_Mat44 {
    pub fn new() -> Map_Mat44 {
        ::std::default::Default::default()
    }

    // repeated double pose = 1;


    pub fn get_pose(&self) -> &[f64] {
        &self.pose
    }
    pub fn clear_pose(&mut self) {
        self.pose.clear();
    }

    // Param is passed by value, moved
    pub fn set_pose(&mut self, v: ::std::vec::Vec<f64>) {
        self.pose = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pose(&mut self) -> &mut ::std::vec::Vec<f64> {
        &mut self.pose
    }

    // Take field
    pub fn take_pose(&mut self) -> ::std::vec::Vec<f64> {
        ::std::mem::replace(&mut self.pose, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Map_Mat44 {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.pose)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += 9 * self.pose.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.pose {
            os.write_double(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Map_Mat44 {
        Map_Mat44::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pose",
                |m: &Map_Mat44| { &m.pose },
                |m: &mut Map_Mat44| { &mut m.pose },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Map_Mat44>(
                "Map.Mat44",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Map_Mat44 {
        static instance: ::protobuf::rt::LazyV2<Map_Mat44> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Map_Mat44::new)
    }
}

impl ::protobuf::Clear for Map_Mat44 {
    fn clear(&mut self) {
        self.pose.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Map_Mat44 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Map_Mat44 {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Map_msg {
    // message fields
    pub tag: ::std::string::String,
    pub txt: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Map_msg {
    fn default() -> &'a Map_msg {
        <Map_msg as ::protobuf::Message>::default_instance()
    }
}

impl Map_msg {
    pub fn new() -> Map_msg {
        ::std::default::Default::default()
    }

    // string tag = 1;


    pub fn get_tag(&self) -> &str {
        &self.tag
    }
    pub fn clear_tag(&mut self) {
        self.tag.clear();
    }

    // Param is passed by value, moved
    pub fn set_tag(&mut self, v: ::std::string::String) {
        self.tag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tag(&mut self) -> &mut ::std::string::String {
        &mut self.tag
    }

    // Take field
    pub fn take_tag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tag, ::std::string::String::new())
    }

    // string txt = 2;


    pub fn get_txt(&self) -> &str {
        &self.txt
    }
    pub fn clear_txt(&mut self) {
        self.txt.clear();
    }

    // Param is passed by value, moved
    pub fn set_txt(&mut self, v: ::std::string::String) {
        self.txt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txt(&mut self) -> &mut ::std::string::String {
        &mut self.txt
    }

    // Take field
    pub fn take_txt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.txt, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Map_msg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tag)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.txt)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tag.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tag);
        }
        if !self.txt.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.txt);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tag.is_empty() {
            os.write_string(1, &self.tag)?;
        }
        if !self.txt.is_empty() {
            os.write_string(2, &self.txt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Map_msg {
        Map_msg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tag",
                |m: &Map_msg| { &m.tag },
                |m: &mut Map_msg| { &mut m.tag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "txt",
                |m: &Map_msg| { &m.txt },
                |m: &mut Map_msg| { &mut m.txt },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Map_msg>(
                "Map.msg",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Map_msg {
        static instance: ::protobuf::rt::LazyV2<Map_msg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Map_msg::new)
    }
}

impl ::protobuf::Clear for Map_msg {
    fn clear(&mut self) {
        self.tag.clear();
        self.txt.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Map_msg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Map_msg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11map_segment.proto\x12\x0bmap_segment\"\xee\x04\n\x03Map\x12=\n\rcu\
    rrent_frame\x18\x01\x20\x01(\x0b2\x16.map_segment.Map.Mat44R\x0ccurrentF\
    rameB\0\x129\n\tkeyframes\x18\x02\x20\x03(\x0b2\x19.map_segment.Map.keyf\
    rameR\tkeyframesB\0\x12-\n\x05edges\x18\x03\x20\x03(\x0b2\x15.map_segmen\
    t.Map.edgeR\x05edgesB\0\x129\n\tlandmarks\x18\x04\x20\x03(\x0b2\x19.map_\
    segment.Map.landmarkR\tlandmarksB\0\x12)\n\x0flocal_landmarks\x18\x05\
    \x20\x03(\rR\x0elocalLandmarksB\0\x122\n\x08messages\x18\x06\x20\x03(\
    \x0b2\x14.map_segment.Map.msgR\x08messagesB\0\x1aL\n\x08keyframe\x12\x10\
    \n\x02id\x18\x01\x20\x01(\rR\x02idB\0\x12,\n\x04pose\x18\x02\x20\x01(\
    \x0b2\x16.map_segment.Map.Mat44R\x04poseB\0:\0\x1a0\n\x04edge\x12\x12\n\
    \x03id0\x18\x01\x20\x01(\rR\x03id0B\0\x12\x12\n\x03id1\x18\x02\x20\x01(\
    \rR\x03id1B\0:\0\x1aP\n\x08landmark\x12\x10\n\x02id\x18\x01\x20\x01(\rR\
    \x02idB\0\x12\x18\n\x06coords\x18\x02\x20\x03(\x01R\x06coordsB\0\x12\x16\
    \n\x05color\x18\x03\x20\x03(\x01R\x05colorB\0:\0\x1a\x1f\n\x05Mat44\x12\
    \x14\n\x04pose\x18\x01\x20\x03(\x01R\x04poseB\0:\0\x1a/\n\x03msg\x12\x12\
    \n\x03tag\x18\x01\x20\x01(\tR\x03tagB\0\x12\x12\n\x03txt\x18\x02\x20\x01\
    (\tR\x03txtB\0:\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
